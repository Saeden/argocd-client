/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{ContentType, Error, configuration};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

/// struct for typed errors of method [`cluster_service_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClusterServiceCreateError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cluster_service_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClusterServiceDeleteError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cluster_service_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClusterServiceGetError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cluster_service_invalidate_cache`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClusterServiceInvalidateCacheError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cluster_service_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClusterServiceListError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cluster_service_rotate_auth`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClusterServiceRotateAuthError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cluster_service_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClusterServiceUpdateError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

pub async fn cluster_service_create(
    configuration: &configuration::Configuration,
    body: models::V1alpha1Cluster,
    upsert: Option<bool>,
) -> Result<models::V1alpha1Cluster, Error<ClusterServiceCreateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_body = body;
    let p_query_upsert = upsert;

    let uri_str = format!("{}/api/v1/clusters", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_upsert {
        req_builder = req_builder.query(&[("upsert", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1Cluster`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1Cluster`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ClusterServiceCreateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn cluster_service_delete(
    configuration: &configuration::Configuration,
    id_value: &str,
    server: Option<&str>,
    name: Option<&str>,
    id_type: Option<&str>,
) -> Result<serde_json::Value, Error<ClusterServiceDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_id_value = id_value;
    let p_query_server = server;
    let p_query_name = name;
    let p_query_id_type = id_type;

    let uri_str = format!(
        "{}/api/v1/clusters/{}",
        configuration.base_path,
        crate::apis::urlencode(p_path_id_value)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_query_server {
        req_builder = req_builder.query(&[("server", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_id_type {
        req_builder = req_builder.query(&[("id.type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `serde_json::Value`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ClusterServiceDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn cluster_service_get(
    configuration: &configuration::Configuration,
    id_value: &str,
    server: Option<&str>,
    name: Option<&str>,
    id_type: Option<&str>,
) -> Result<models::V1alpha1Cluster, Error<ClusterServiceGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_id_value = id_value;
    let p_query_server = server;
    let p_query_name = name;
    let p_query_id_type = id_type;

    let uri_str = format!(
        "{}/api/v1/clusters/{}",
        configuration.base_path,
        crate::apis::urlencode(p_path_id_value)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_server {
        req_builder = req_builder.query(&[("server", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_id_type {
        req_builder = req_builder.query(&[("id.type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1Cluster`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1Cluster`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ClusterServiceGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn cluster_service_invalidate_cache(
    configuration: &configuration::Configuration,
    id_value: &str,
) -> Result<models::V1alpha1Cluster, Error<ClusterServiceInvalidateCacheError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_id_value = id_value;

    let uri_str = format!(
        "{}/api/v1/clusters/{}/invalidate-cache",
        configuration.base_path,
        crate::apis::urlencode(p_path_id_value)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1Cluster`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1Cluster`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ClusterServiceInvalidateCacheError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn cluster_service_list(
    configuration: &configuration::Configuration,
    server: Option<&str>,
    name: Option<&str>,
    id_type: Option<&str>,
    id_value: Option<&str>,
) -> Result<models::V1alpha1ClusterList, Error<ClusterServiceListError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_server = server;
    let p_query_name = name;
    let p_query_id_type = id_type;
    let p_query_id_value = id_value;

    let uri_str = format!("{}/api/v1/clusters", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_server {
        req_builder = req_builder.query(&[("server", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_id_type {
        req_builder = req_builder.query(&[("id.type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_id_value {
        req_builder = req_builder.query(&[("id.value", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1ClusterList`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1ClusterList`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ClusterServiceListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn cluster_service_rotate_auth(
    configuration: &configuration::Configuration,
    id_value: &str,
) -> Result<serde_json::Value, Error<ClusterServiceRotateAuthError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_id_value = id_value;

    let uri_str = format!(
        "{}/api/v1/clusters/{}/rotate-auth",
        configuration.base_path,
        crate::apis::urlencode(p_path_id_value)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `serde_json::Value`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ClusterServiceRotateAuthError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn cluster_service_update(
    configuration: &configuration::Configuration,
    body: models::V1alpha1Cluster,
    id_value: &str,
    updated_fields: Option<Vec<String>>,
    id_type: Option<&str>,
) -> Result<models::V1alpha1Cluster, Error<ClusterServiceUpdateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_body = body;
    let p_path_id_value = id_value;
    let p_query_updated_fields = updated_fields;
    let p_query_id_type = id_type;

    let uri_str = format!(
        "{}/api/v1/clusters/{}",
        configuration.base_path,
        crate::apis::urlencode(p_path_id_value)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_query_updated_fields {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .iter()
                    .map(|p| ("updatedFields".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "updatedFields",
                &param_value
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_query_id_type {
        req_builder = req_builder.query(&[("id.type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1Cluster`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1Cluster`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ClusterServiceUpdateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
