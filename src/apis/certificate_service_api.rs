/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{ContentType, Error, configuration};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

/// struct for typed errors of method [`certificate_service_create_certificate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CertificateServiceCreateCertificateError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`certificate_service_delete_certificate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CertificateServiceDeleteCertificateError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`certificate_service_list_certificates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CertificateServiceListCertificatesError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

pub async fn certificate_service_create_certificate(
    configuration: &configuration::Configuration,
    body: models::V1alpha1RepositoryCertificateList,
    upsert: Option<bool>,
) -> Result<
    models::V1alpha1RepositoryCertificateList,
    Error<CertificateServiceCreateCertificateError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_body = body;
    let p_query_upsert = upsert;

    let uri_str = format!("{}/api/v1/certificates", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_upsert {
        req_builder = req_builder.query(&[("upsert", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1RepositoryCertificateList`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1RepositoryCertificateList`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CertificateServiceCreateCertificateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn certificate_service_delete_certificate(
    configuration: &configuration::Configuration,
    host_name_pattern: Option<&str>,
    cert_type: Option<&str>,
    cert_sub_type: Option<&str>,
) -> Result<
    models::V1alpha1RepositoryCertificateList,
    Error<CertificateServiceDeleteCertificateError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_host_name_pattern = host_name_pattern;
    let p_query_cert_type = cert_type;
    let p_query_cert_sub_type = cert_sub_type;

    let uri_str = format!("{}/api/v1/certificates", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_query_host_name_pattern {
        req_builder = req_builder.query(&[("hostNamePattern", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_cert_type {
        req_builder = req_builder.query(&[("certType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_cert_sub_type {
        req_builder = req_builder.query(&[("certSubType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1RepositoryCertificateList`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1RepositoryCertificateList`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CertificateServiceDeleteCertificateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn certificate_service_list_certificates(
    configuration: &configuration::Configuration,
    host_name_pattern: Option<&str>,
    cert_type: Option<&str>,
    cert_sub_type: Option<&str>,
) -> Result<models::V1alpha1RepositoryCertificateList, Error<CertificateServiceListCertificatesError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_host_name_pattern = host_name_pattern;
    let p_query_cert_type = cert_type;
    let p_query_cert_sub_type = cert_sub_type;

    let uri_str = format!("{}/api/v1/certificates", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_host_name_pattern {
        req_builder = req_builder.query(&[("hostNamePattern", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_cert_type {
        req_builder = req_builder.query(&[("certType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_cert_sub_type {
        req_builder = req_builder.query(&[("certSubType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::V1alpha1RepositoryCertificateList`",
            ))),
            ContentType::Unsupported(unknown_type) => {
                Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1RepositoryCertificateList`"
                ))))
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CertificateServiceListCertificatesError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
