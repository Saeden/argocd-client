/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`application_set_service_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplicationSetServiceCreateError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`application_set_service_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplicationSetServiceDeleteError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`application_set_service_generate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplicationSetServiceGenerateError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`application_set_service_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplicationSetServiceGetError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`application_set_service_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplicationSetServiceListError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`application_set_service_resource_tree`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplicationSetServiceResourceTreeError {
    DefaultResponse(models::RuntimeError),
    UnknownValue(serde_json::Value),
}

pub async fn application_set_service_create(
    configuration: &configuration::Configuration,
    body: models::V1alpha1ApplicationSet,
    upsert: Option<bool>,
    dry_run: Option<bool>,
) -> Result<models::V1alpha1ApplicationSet, Error<ApplicationSetServiceCreateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_body = body;
    let p_query_upsert = upsert;
    let p_query_dry_run = dry_run;

    let uri_str = format!("{}/api/v1/applicationsets", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_upsert {
        req_builder = req_builder.query(&[("upsert", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_dry_run {
        req_builder = req_builder.query(&[("dryRun", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1alpha1ApplicationSet`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1ApplicationSet`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApplicationSetServiceCreateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn application_set_service_delete(
    configuration: &configuration::Configuration,
    name: &str,
    appset_namespace: Option<&str>,
) -> Result<models::ApplicationsetApplicationSetResponse, Error<ApplicationSetServiceDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_name = name;
    let p_query_appset_namespace = appset_namespace;

    let uri_str = format!(
        "{}/api/v1/applicationsets/{name}",
        configuration.base_path,
        name = crate::apis::urlencode(p_path_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_query_appset_namespace {
        req_builder = req_builder.query(&[("appsetNamespace", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApplicationsetApplicationSetResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApplicationsetApplicationSetResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApplicationSetServiceDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn application_set_service_generate(
    configuration: &configuration::Configuration,
    body: models::ApplicationsetApplicationSetGenerateRequest,
) -> Result<
    models::ApplicationsetApplicationSetGenerateResponse,
    Error<ApplicationSetServiceGenerateError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_body = body;

    let uri_str = format!(
        "{}/api/v1/applicationsets/generate",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApplicationsetApplicationSetGenerateResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApplicationsetApplicationSetGenerateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApplicationSetServiceGenerateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn application_set_service_get(
    configuration: &configuration::Configuration,
    name: &str,
    appset_namespace: Option<&str>,
) -> Result<models::V1alpha1ApplicationSet, Error<ApplicationSetServiceGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_name = name;
    let p_query_appset_namespace = appset_namespace;

    let uri_str = format!(
        "{}/api/v1/applicationsets/{name}",
        configuration.base_path,
        name = crate::apis::urlencode(p_path_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_appset_namespace {
        req_builder = req_builder.query(&[("appsetNamespace", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1alpha1ApplicationSet`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1ApplicationSet`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApplicationSetServiceGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn application_set_service_list(
    configuration: &configuration::Configuration,
    projects: Option<Vec<String>>,
    selector: Option<&str>,
    appset_namespace: Option<&str>,
) -> Result<models::V1alpha1ApplicationSetList, Error<ApplicationSetServiceListError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_projects = projects;
    let p_query_selector = selector;
    let p_query_appset_namespace = appset_namespace;

    let uri_str = format!("{}/api/v1/applicationsets", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_projects {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .iter()
                    .map(|p| ("projects".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "projects",
                &param_value
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_query_selector {
        req_builder = req_builder.query(&[("selector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_appset_namespace {
        req_builder = req_builder.query(&[("appsetNamespace", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1alpha1ApplicationSetList`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1ApplicationSetList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApplicationSetServiceListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn application_set_service_resource_tree(
    configuration: &configuration::Configuration,
    name: &str,
    appset_namespace: Option<&str>,
) -> Result<models::V1alpha1ApplicationSetTree, Error<ApplicationSetServiceResourceTreeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_name = name;
    let p_query_appset_namespace = appset_namespace;

    let uri_str = format!(
        "{}/api/v1/applicationsets/{name}/resource-tree",
        configuration.base_path,
        name = crate::apis::urlencode(p_path_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_appset_namespace {
        req_builder = req_builder.query(&[("appsetNamespace", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1alpha1ApplicationSetTree`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1alpha1ApplicationSetTree`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApplicationSetServiceResourceTreeError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
