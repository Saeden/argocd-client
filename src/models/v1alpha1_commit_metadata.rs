/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1CommitMetadata : CommitMetadata contains metadata about a commit that is related in some way to another commit.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1CommitMetadata {
    /// Author is the author of the commit, i.e. `git show -s --format=%an <%ae>`. Must be formatted according to RFC 5322 (mail.Address.String()). Comes from the Argocd-reference-commit-author trailer.
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    /// Body is the commit message body minus the subject line, i.e. `git show -s --format=%b`. Comes from the Argocd-reference-commit-body trailer.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Date is the date of the commit, formatted as by `git show -s --format=%aI` (RFC 3339). It can also be an empty string if the date is unknown. Comes from the Argocd-reference-commit-date trailer.
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// RepoURL is the URL of the repository where the commit is located. Comes from the Argocd-reference-commit-repourl trailer. This value is not validated and should not be used to construct UI links unless it is properly validated and/or sanitized first.
    #[serde(rename = "repoUrl", skip_serializing_if = "Option::is_none")]
    pub repo_url: Option<String>,
    /// SHA is the commit hash. Comes from the Argocd-reference-commit-sha trailer.
    #[serde(rename = "sha", skip_serializing_if = "Option::is_none")]
    pub sha: Option<String>,
    /// Subject is the commit message subject line, i.e. `git show -s --format=%s`. Comes from the Argocd-reference-commit-subject trailer.
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
}

impl V1alpha1CommitMetadata {
    /// CommitMetadata contains metadata about a commit that is related in some way to another commit.
    pub fn new() -> V1alpha1CommitMetadata {
        V1alpha1CommitMetadata {
            author: None,
            body: None,
            date: None,
            repo_url: None,
            sha: None,
            subject: None,
        }
    }
}

