/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1HydrateOperation {
    #[serde(rename = "drySHA", skip_serializing_if = "Option::is_none")]
    pub dry_sha: Option<String>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<String>,
    #[serde(rename = "hydratedSHA", skip_serializing_if = "Option::is_none")]
    pub hydrated_sha: Option<String>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "phase", skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    #[serde(rename = "sourceHydrator", skip_serializing_if = "Option::is_none")]
    pub source_hydrator: Option<Box<models::V1alpha1SourceHydrator>>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
    #[serde(rename = "startedAt", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
}

impl V1alpha1HydrateOperation {
    pub fn new() -> V1alpha1HydrateOperation {
        V1alpha1HydrateOperation {
            dry_sha: None,
            finished_at: None,
            hydrated_sha: None,
            message: None,
            phase: None,
            source_hydrator: None,
            started_at: None,
        }
    }
}
