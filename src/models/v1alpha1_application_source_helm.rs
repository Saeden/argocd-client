/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ApplicationSourceHelm {
    /// APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default, Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
    #[serde(rename = "apiVersions", skip_serializing_if = "Option::is_none")]
    pub api_versions: Option<Vec<String>>,
    #[serde(rename = "fileParameters", skip_serializing_if = "Option::is_none")]
    pub file_parameters: Option<Vec<models::V1alpha1HelmFileParameter>>,
    #[serde(rename = "ignoreMissingValueFiles", skip_serializing_if = "Option::is_none")]
    pub ignore_missing_value_files: Option<bool>,
    /// KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD uses the Kubernetes version of the target cluster.
    #[serde(rename = "kubeVersion", skip_serializing_if = "Option::is_none")]
    pub kube_version: Option<String>,
    /// Namespace is an optional namespace to template with. If left empty, defaults to the app's destination namespace.
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<models::V1alpha1HelmParameter>>,
    #[serde(rename = "passCredentials", skip_serializing_if = "Option::is_none")]
    pub pass_credentials: Option<bool>,
    #[serde(rename = "releaseName", skip_serializing_if = "Option::is_none")]
    pub release_name: Option<String>,
    #[serde(rename = "skipCrds", skip_serializing_if = "Option::is_none")]
    pub skip_crds: Option<bool>,
    #[serde(rename = "skipSchemaValidation", skip_serializing_if = "Option::is_none")]
    pub skip_schema_validation: Option<bool>,
    /// SkipTests skips test manifest installation step (Helm's --skip-tests).
    #[serde(rename = "skipTests", skip_serializing_if = "Option::is_none")]
    pub skip_tests: Option<bool>,
    #[serde(rename = "valueFiles", skip_serializing_if = "Option::is_none")]
    pub value_files: Option<Vec<String>>,
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(rename = "valuesObject", skip_serializing_if = "Option::is_none")]
    pub values_object: Option<Box<models::RuntimeRawExtension>>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl V1alpha1ApplicationSourceHelm {
    pub fn new() -> V1alpha1ApplicationSourceHelm {
        V1alpha1ApplicationSourceHelm {
            api_versions: None,
            file_parameters: None,
            ignore_missing_value_files: None,
            kube_version: None,
            namespace: None,
            parameters: None,
            pass_credentials: None,
            release_name: None,
            skip_crds: None,
            skip_schema_validation: None,
            skip_tests: None,
            value_files: None,
            values: None,
            values_object: None,
            version: None,
        }
    }
}

