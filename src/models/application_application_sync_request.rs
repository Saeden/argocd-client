/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationApplicationSyncRequest {
    #[serde(rename = "appNamespace", skip_serializing_if = "Option::is_none")]
    pub app_namespace: Option<String>,
    #[serde(rename = "dryRun", skip_serializing_if = "Option::is_none")]
    pub dry_run: Option<bool>,
    #[serde(rename = "infos", skip_serializing_if = "Option::is_none")]
    pub infos: Option<Vec<models::V1alpha1Info>>,
    #[serde(rename = "manifests", skip_serializing_if = "Option::is_none")]
    pub manifests: Option<Vec<String>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "prune", skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<models::V1alpha1SyncOperationResource>>,
    #[serde(rename = "retryStrategy", skip_serializing_if = "Option::is_none")]
    pub retry_strategy: Option<Box<models::V1alpha1RetryStrategy>>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    #[serde(rename = "revisions", skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Vec<String>>,
    #[serde(rename = "sourcePositions", skip_serializing_if = "Option::is_none")]
    pub source_positions: Option<Vec<String>>,
    #[serde(rename = "strategy", skip_serializing_if = "Option::is_none")]
    pub strategy: Option<Box<models::V1alpha1SyncStrategy>>,
    #[serde(rename = "syncOptions", skip_serializing_if = "Option::is_none")]
    pub sync_options: Option<Box<models::ApplicationSyncOptions>>,
}

impl ApplicationApplicationSyncRequest {
    pub fn new() -> ApplicationApplicationSyncRequest {
        ApplicationApplicationSyncRequest {
            app_namespace: None,
            dry_run: None,
            infos: None,
            manifests: None,
            name: None,
            project: None,
            prune: None,
            resources: None,
            retry_strategy: None,
            revision: None,
            revisions: None,
            source_positions: None,
            strategy: None,
            sync_options: None,
        }
    }
}

