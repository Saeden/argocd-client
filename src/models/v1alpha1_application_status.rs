/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ApplicationStatus {
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::V1alpha1ApplicationCondition>>,
    #[serde(rename = "controllerNamespace", skip_serializing_if = "Option::is_none")]
    pub controller_namespace: Option<String>,
    #[serde(rename = "health", skip_serializing_if = "Option::is_none")]
    pub health: Option<Box<models::V1alpha1AppHealthStatus>>,
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<Vec<models::V1alpha1RevisionHistory>>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
    #[serde(rename = "observedAt", skip_serializing_if = "Option::is_none")]
    pub observed_at: Option<String>,
    #[serde(rename = "operationState", skip_serializing_if = "Option::is_none")]
    pub operation_state: Option<Box<models::V1alpha1OperationState>>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
    #[serde(rename = "reconciledAt", skip_serializing_if = "Option::is_none")]
    pub reconciled_at: Option<String>,
    #[serde(rename = "resourceHealthSource", skip_serializing_if = "Option::is_none")]
    pub resource_health_source: Option<String>,
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<models::Applicationv1alpha1ResourceStatus>>,
    #[serde(rename = "sourceHydrator", skip_serializing_if = "Option::is_none")]
    pub source_hydrator: Option<Box<models::V1alpha1SourceHydratorStatus>>,
    #[serde(rename = "sourceType", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<String>,
    #[serde(rename = "sourceTypes", skip_serializing_if = "Option::is_none")]
    pub source_types: Option<Vec<String>>,
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Box<models::V1alpha1ApplicationSummary>>,
    #[serde(rename = "sync", skip_serializing_if = "Option::is_none")]
    pub sync: Option<Box<models::V1alpha1SyncStatus>>,
}

impl V1alpha1ApplicationStatus {
    pub fn new() -> V1alpha1ApplicationStatus {
        V1alpha1ApplicationStatus {
            conditions: None,
            controller_namespace: None,
            health: None,
            history: None,
            observed_at: None,
            operation_state: None,
            reconciled_at: None,
            resource_health_source: None,
            resources: None,
            source_hydrator: None,
            source_type: None,
            source_types: None,
            summary: None,
            sync: None,
        }
    }
}

