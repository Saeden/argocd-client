/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1ScmProviderGeneratorGitea : SCMProviderGeneratorGitea defines a connection info specific to Gitea.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ScmProviderGeneratorGitea {
    /// Scan all branches instead of just the default branch.
    #[serde(rename = "allBranches", skip_serializing_if = "Option::is_none")]
    pub all_branches: Option<bool>,
    /// The Gitea URL to talk to. For example https://gitea.mydomain.com/.
    #[serde(rename = "api", skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(rename = "insecure", skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// Gitea organization or user to scan. Required.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "tokenRef", skip_serializing_if = "Option::is_none")]
    pub token_ref: Option<Box<models::V1alpha1SecretRef>>,
}

impl V1alpha1ScmProviderGeneratorGitea {
    /// SCMProviderGeneratorGitea defines a connection info specific to Gitea.
    pub fn new() -> V1alpha1ScmProviderGeneratorGitea {
        V1alpha1ScmProviderGeneratorGitea {
            all_branches: None,
            api: None,
            insecure: None,
            owner: None,
            token_ref: None,
        }
    }
}
