/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Applicationv1alpha1ResourceStatus : ResourceStatus holds the current synchronization and health status of a Kubernetes resource.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Applicationv1alpha1ResourceStatus {
    /// Group represents the API group of the resource (e.g., \"apps\" for Deployments).
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "health", skip_serializing_if = "Option::is_none")]
    pub health: Option<Box<models::V1alpha1HealthStatus>>,
    /// Hook is true if the resource is used as a lifecycle hook in an Argo CD application.
    #[serde(rename = "hook", skip_serializing_if = "Option::is_none")]
    pub hook: Option<bool>,
    /// Kind specifies the type of the resource (e.g., \"Deployment\", \"Service\").
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the unique name of the resource within the namespace.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace defines the Kubernetes namespace where the resource is located.
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// RequiresDeletionConfirmation is true if the resource requires explicit user confirmation before deletion.
    #[serde(
        rename = "requiresDeletionConfirmation",
        skip_serializing_if = "Option::is_none"
    )]
    pub requires_deletion_confirmation: Option<bool>,
    /// RequiresPruning is true if the resource needs to be pruned (deleted) as part of synchronization.
    #[serde(rename = "requiresPruning", skip_serializing_if = "Option::is_none")]
    pub requires_pruning: Option<bool>,
    /// Status represents the synchronization state of the resource (e.g., Synced, OutOfSync).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// SyncWave determines the order in which resources are applied during a sync operation. Lower values are applied first.
    #[serde(rename = "syncWave", skip_serializing_if = "Option::is_none")]
    pub sync_wave: Option<i64>,
    /// Version indicates the API version of the resource (e.g., \"v1\", \"v1beta1\").
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl Applicationv1alpha1ResourceStatus {
    /// ResourceStatus holds the current synchronization and health status of a Kubernetes resource.
    pub fn new() -> Applicationv1alpha1ResourceStatus {
        Applicationv1alpha1ResourceStatus {
            group: None,
            health: None,
            hook: None,
            kind: None,
            name: None,
            namespace: None,
            requires_deletion_confirmation: None,
            requires_pruning: None,
            status: None,
            sync_wave: None,
            version: None,
        }
    }
}
