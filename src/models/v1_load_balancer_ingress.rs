/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1LoadBalancerIngress : LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1LoadBalancerIngress {
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(rename = "ip", skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    #[serde(rename = "ipMode", skip_serializing_if = "Option::is_none")]
    pub ip_mode: Option<String>,
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<models::V1PortStatus>>,
}

impl V1LoadBalancerIngress {
    /// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
    pub fn new() -> V1LoadBalancerIngress {
        V1LoadBalancerIngress {
            hostname: None,
            ip: None,
            ip_mode: None,
            ports: None,
        }
    }
}

