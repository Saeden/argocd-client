/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1ManagedFieldsEntry : ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1ManagedFieldsEntry {
    /// APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldsType", skip_serializing_if = "Option::is_none")]
    pub fields_type: Option<String>,
    #[serde(rename = "fieldsV1", skip_serializing_if = "Option::is_none")]
    pub fields_v1: Option<Box<models::V1FieldsV1>>,
    /// Manager is an identifier of the workflow managing these fields.
    #[serde(rename = "manager", skip_serializing_if = "Option::is_none")]
    pub manager: Option<String>,
    /// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    /// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
    #[serde(rename = "subresource", skip_serializing_if = "Option::is_none")]
    pub subresource: Option<String>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

impl V1ManagedFieldsEntry {
    /// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
    pub fn new() -> V1ManagedFieldsEntry {
        V1ManagedFieldsEntry {
            api_version: None,
            fields_type: None,
            fields_v1: None,
            manager: None,
            operation: None,
            subresource: None,
            time: None,
        }
    }
}
