/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1RepoCreds {
    #[serde(rename = "bearerToken", skip_serializing_if = "Option::is_none")]
    pub bearer_token: Option<String>,
    #[serde(rename = "enableOCI", skip_serializing_if = "Option::is_none")]
    pub enable_oci: Option<bool>,
    #[serde(rename = "forceHttpBasicAuth", skip_serializing_if = "Option::is_none")]
    pub force_http_basic_auth: Option<bool>,
    #[serde(rename = "gcpServiceAccountKey", skip_serializing_if = "Option::is_none")]
    pub gcp_service_account_key: Option<String>,
    #[serde(rename = "githubAppEnterpriseBaseUrl", skip_serializing_if = "Option::is_none")]
    pub github_app_enterprise_base_url: Option<String>,
    #[serde(rename = "githubAppID", skip_serializing_if = "Option::is_none")]
    pub github_app_id: Option<i64>,
    #[serde(rename = "githubAppInstallationID", skip_serializing_if = "Option::is_none")]
    pub github_app_installation_id: Option<i64>,
    #[serde(rename = "githubAppPrivateKey", skip_serializing_if = "Option::is_none")]
    pub github_app_private_key: Option<String>,
    /// InsecureOCIForceHttp specifies whether the connection to the repository uses TLS at _all_. If true, no TLS. This flag is applicable for OCI repos only.
    #[serde(rename = "insecureOCIForceHttp", skip_serializing_if = "Option::is_none")]
    pub insecure_oci_force_http: Option<bool>,
    #[serde(rename = "noProxy", skip_serializing_if = "Option::is_none")]
    pub no_proxy: Option<String>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
    pub proxy: Option<String>,
    #[serde(rename = "sshPrivateKey", skip_serializing_if = "Option::is_none")]
    pub ssh_private_key: Option<String>,
    #[serde(rename = "tlsClientCertData", skip_serializing_if = "Option::is_none")]
    pub tls_client_cert_data: Option<String>,
    #[serde(rename = "tlsClientCertKey", skip_serializing_if = "Option::is_none")]
    pub tls_client_cert_key: Option<String>,
    /// Type specifies the type of the repoCreds. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "useAzureWorkloadIdentity", skip_serializing_if = "Option::is_none")]
    pub use_azure_workload_identity: Option<bool>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl V1alpha1RepoCreds {
    pub fn new() -> V1alpha1RepoCreds {
        V1alpha1RepoCreds {
            bearer_token: None,
            enable_oci: None,
            force_http_basic_auth: None,
            gcp_service_account_key: None,
            github_app_enterprise_base_url: None,
            github_app_id: None,
            github_app_installation_id: None,
            github_app_private_key: None,
            insecure_oci_force_http: None,
            no_proxy: None,
            password: None,
            proxy: None,
            ssh_private_key: None,
            tls_client_cert_data: None,
            tls_client_cert_key: None,
            r#type: None,
            url: None,
            use_azure_workload_identity: None,
            username: None,
        }
    }
}

