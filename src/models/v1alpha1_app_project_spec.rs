/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1AppProjectSpec {
    #[serde(
        rename = "clusterResourceBlacklist",
        skip_serializing_if = "Option::is_none"
    )]
    pub cluster_resource_blacklist: Option<Vec<models::V1GroupKind>>,
    #[serde(
        rename = "clusterResourceWhitelist",
        skip_serializing_if = "Option::is_none"
    )]
    pub cluster_resource_whitelist: Option<Vec<models::V1GroupKind>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// DestinationServiceAccounts holds information about the service accounts to be impersonated for the application sync operation for each destination.
    #[serde(
        rename = "destinationServiceAccounts",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_service_accounts:
        Option<Vec<models::V1alpha1ApplicationDestinationServiceAccount>>,
    #[serde(rename = "destinations", skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<models::V1alpha1ApplicationDestination>>,
    #[serde(
        rename = "namespaceResourceBlacklist",
        skip_serializing_if = "Option::is_none"
    )]
    pub namespace_resource_blacklist: Option<Vec<models::V1GroupKind>>,
    #[serde(
        rename = "namespaceResourceWhitelist",
        skip_serializing_if = "Option::is_none"
    )]
    pub namespace_resource_whitelist: Option<Vec<models::V1GroupKind>>,
    #[serde(rename = "orphanedResources", skip_serializing_if = "Option::is_none")]
    pub orphaned_resources: Option<Box<models::V1alpha1OrphanedResourcesMonitorSettings>>,
    #[serde(
        rename = "permitOnlyProjectScopedClusters",
        skip_serializing_if = "Option::is_none"
    )]
    pub permit_only_project_scoped_clusters: Option<bool>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<models::V1alpha1ProjectRole>>,
    #[serde(rename = "signatureKeys", skip_serializing_if = "Option::is_none")]
    pub signature_keys: Option<Vec<models::V1alpha1SignatureKey>>,
    #[serde(rename = "sourceNamespaces", skip_serializing_if = "Option::is_none")]
    pub source_namespaces: Option<Vec<String>>,
    #[serde(rename = "sourceRepos", skip_serializing_if = "Option::is_none")]
    pub source_repos: Option<Vec<String>>,
    #[serde(rename = "syncWindows", skip_serializing_if = "Option::is_none")]
    pub sync_windows: Option<Vec<models::V1alpha1SyncWindow>>,
}

impl V1alpha1AppProjectSpec {
    pub fn new() -> V1alpha1AppProjectSpec {
        V1alpha1AppProjectSpec {
            cluster_resource_blacklist: None,
            cluster_resource_whitelist: None,
            description: None,
            destination_service_accounts: None,
            destinations: None,
            namespace_resource_blacklist: None,
            namespace_resource_whitelist: None,
            orphaned_resources: None,
            permit_only_project_scoped_clusters: None,
            roles: None,
            signature_keys: None,
            source_namespaces: None,
            source_repos: None,
            sync_windows: None,
        }
    }
}
