/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1ScmProviderGenerator : SCMProviderGenerator defines a generator that scrapes a SCMaaS API to find candidate repos.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ScmProviderGenerator {
    #[serde(rename = "awsCodeCommit", skip_serializing_if = "Option::is_none")]
    pub aws_code_commit: Option<Box<models::V1alpha1ScmProviderGeneratorAwsCodeCommit>>,
    #[serde(rename = "azureDevOps", skip_serializing_if = "Option::is_none")]
    pub azure_dev_ops: Option<Box<models::V1alpha1ScmProviderGeneratorAzureDevOps>>,
    #[serde(rename = "bitbucket", skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<Box<models::V1alpha1ScmProviderGeneratorBitbucket>>,
    #[serde(rename = "bitbucketServer", skip_serializing_if = "Option::is_none")]
    pub bitbucket_server: Option<Box<models::V1alpha1ScmProviderGeneratorBitbucketServer>>,
    /// Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
    #[serde(rename = "cloneProtocol", skip_serializing_if = "Option::is_none")]
    pub clone_protocol: Option<String>,
    /// Filters for which repos should be considered.
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<models::V1alpha1ScmProviderGeneratorFilter>>,
    #[serde(rename = "gitea", skip_serializing_if = "Option::is_none")]
    pub gitea: Option<Box<models::V1alpha1ScmProviderGeneratorGitea>>,
    #[serde(rename = "github", skip_serializing_if = "Option::is_none")]
    pub github: Option<Box<models::V1alpha1ScmProviderGeneratorGithub>>,
    #[serde(rename = "gitlab", skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<Box<models::V1alpha1ScmProviderGeneratorGitlab>>,
    /// Standard parameters.
    #[serde(rename = "requeueAfterSeconds", skip_serializing_if = "Option::is_none")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Box<models::V1alpha1ApplicationSetTemplate>>,
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<std::collections::HashMap<String, String>>,
}

impl V1alpha1ScmProviderGenerator {
    /// SCMProviderGenerator defines a generator that scrapes a SCMaaS API to find candidate repos.
    pub fn new() -> V1alpha1ScmProviderGenerator {
        V1alpha1ScmProviderGenerator {
            aws_code_commit: None,
            azure_dev_ops: None,
            bitbucket: None,
            bitbucket_server: None,
            clone_protocol: None,
            filters: None,
            gitea: None,
            github: None,
            gitlab: None,
            requeue_after_seconds: None,
            template: None,
            values: None,
        }
    }
}

