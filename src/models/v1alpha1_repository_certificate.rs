/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1RepositoryCertificate {
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "certData", skip_serializing_if = "Option::is_none")]
    pub cert_data: Option<Vec<u8>>,
    #[serde(rename = "certInfo", skip_serializing_if = "Option::is_none")]
    pub cert_info: Option<String>,
    #[serde(rename = "certSubType", skip_serializing_if = "Option::is_none")]
    pub cert_sub_type: Option<String>,
    #[serde(rename = "certType", skip_serializing_if = "Option::is_none")]
    pub cert_type: Option<String>,
    #[serde(rename = "serverName", skip_serializing_if = "Option::is_none")]
    pub server_name: Option<String>,
}

impl V1alpha1RepositoryCertificate {
    pub fn new() -> V1alpha1RepositoryCertificate {
        V1alpha1RepositoryCertificate {
            cert_data: None,
            cert_info: None,
            cert_sub_type: None,
            cert_type: None,
            server_name: None,
        }
    }
}

