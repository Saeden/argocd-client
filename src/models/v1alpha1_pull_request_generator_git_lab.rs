/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1PullRequestGeneratorGitLab : PullRequestGeneratorGitLab defines connection info specific to GitLab.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1PullRequestGeneratorGitLab {
    /// The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
    #[serde(rename = "api", skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(rename = "caRef", skip_serializing_if = "Option::is_none")]
    pub ca_ref: Option<Box<models::V1alpha1ConfigMapKeyRef>>,
    #[serde(rename = "insecure", skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    /// GitLab project to scan. Required.
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// PullRequestState is an additional MRs filter to get only those with a certain state. Default: \"\" (all states). Valid values: opened, closed, merged, locked\".
    #[serde(rename = "pullRequestState", skip_serializing_if = "Option::is_none")]
    pub pull_request_state: Option<String>,
    #[serde(rename = "tokenRef", skip_serializing_if = "Option::is_none")]
    pub token_ref: Option<Box<models::V1alpha1SecretRef>>,
}

impl V1alpha1PullRequestGeneratorGitLab {
    /// PullRequestGeneratorGitLab defines connection info specific to GitLab.
    pub fn new() -> V1alpha1PullRequestGeneratorGitLab {
        V1alpha1PullRequestGeneratorGitLab {
            api: None,
            ca_ref: None,
            insecure: None,
            labels: None,
            project: None,
            pull_request_state: None,
            token_ref: None,
        }
    }
}
