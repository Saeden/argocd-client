/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterOidcConfig {
    #[serde(rename = "cliClientID", skip_serializing_if = "Option::is_none")]
    pub cli_client_id: Option<String>,
    #[serde(rename = "clientID", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[serde(
        rename = "enablePKCEAuthentication",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_pkce_authentication: Option<bool>,
    #[serde(rename = "idTokenClaims", skip_serializing_if = "Option::is_none")]
    pub id_token_claims: Option<std::collections::HashMap<String, models::OidcClaim>>,
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
}

impl ClusterOidcConfig {
    pub fn new() -> ClusterOidcConfig {
        ClusterOidcConfig {
            cli_client_id: None,
            client_id: None,
            enable_pkce_authentication: None,
            id_token_claims: None,
            issuer: None,
            name: None,
            scopes: None,
        }
    }
}
