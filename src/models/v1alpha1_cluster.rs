/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1Cluster {
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<std::collections::HashMap<String, String>>,
    /// Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
    #[serde(rename = "clusterResources", skip_serializing_if = "Option::is_none")]
    pub cluster_resources: Option<bool>,
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<Box<models::V1alpha1ClusterConfig>>,
    #[serde(rename = "connectionState", skip_serializing_if = "Option::is_none")]
    pub connection_state: Option<Box<models::V1alpha1ConnectionState>>,
    #[serde(rename = "info", skip_serializing_if = "Option::is_none")]
    pub info: Option<Box<models::V1alpha1ClusterInfo>>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Holds list of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
    #[serde(rename = "namespaces", skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
    #[serde(rename = "refreshRequestedAt", skip_serializing_if = "Option::is_none")]
    pub refresh_requested_at: Option<String>,
    #[serde(rename = "server", skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
    #[serde(rename = "serverVersion", skip_serializing_if = "Option::is_none")]
    pub server_version: Option<String>,
    /// Shard contains optional shard number. Calculated on the fly by the application controller if not specified.
    #[serde(rename = "shard", skip_serializing_if = "Option::is_none")]
    pub shard: Option<i64>,
}

impl V1alpha1Cluster {
    pub fn new() -> V1alpha1Cluster {
        V1alpha1Cluster {
            annotations: None,
            cluster_resources: None,
            config: None,
            connection_state: None,
            info: None,
            labels: None,
            name: None,
            namespaces: None,
            project: None,
            refresh_requested_at: None,
            server: None,
            server_version: None,
            shard: None,
        }
    }
}

