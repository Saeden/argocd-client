/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1DuckTypeGenerator : DuckType defines a generator to match against clusters registered with ArgoCD.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1DuckTypeGenerator {
    #[serde(rename = "configMapRef", skip_serializing_if = "Option::is_none")]
    pub config_map_ref: Option<String>,
    #[serde(rename = "labelSelector", skip_serializing_if = "Option::is_none")]
    pub label_selector: Option<Box<models::V1LabelSelector>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "requeueAfterSeconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub requeue_after_seconds: Option<i64>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Box<models::V1alpha1ApplicationSetTemplate>>,
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<std::collections::HashMap<String, String>>,
}

impl V1alpha1DuckTypeGenerator {
    /// DuckType defines a generator to match against clusters registered with ArgoCD.
    pub fn new() -> V1alpha1DuckTypeGenerator {
        V1alpha1DuckTypeGenerator {
            config_map_ref: None,
            label_selector: None,
            name: None,
            requeue_after_seconds: None,
            template: None,
            values: None,
        }
    }
}
