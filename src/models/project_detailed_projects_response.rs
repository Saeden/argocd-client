/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectDetailedProjectsResponse {
    #[serde(rename = "clusters", skip_serializing_if = "Option::is_none")]
    pub clusters: Option<Vec<models::V1alpha1Cluster>>,
    #[serde(rename = "globalProjects", skip_serializing_if = "Option::is_none")]
    pub global_projects: Option<Vec<models::V1alpha1AppProject>>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<Box<models::V1alpha1AppProject>>,
    #[serde(rename = "repositories", skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<models::V1alpha1Repository>>,
}

impl ProjectDetailedProjectsResponse {
    pub fn new() -> ProjectDetailedProjectsResponse {
        ProjectDetailedProjectsResponse {
            clusters: None,
            global_projects: None,
            project: None,
            repositories: None,
        }
    }
}

