/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ApplicationSourceKustomize {
    /// APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default, Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
    #[serde(rename = "apiVersions", skip_serializing_if = "Option::is_none")]
    pub api_versions: Option<Vec<String>>,
    #[serde(rename = "commonAnnotations", skip_serializing_if = "Option::is_none")]
    pub common_annotations: Option<std::collections::HashMap<String, String>>,
    #[serde(
        rename = "commonAnnotationsEnvsubst",
        skip_serializing_if = "Option::is_none"
    )]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(rename = "commonLabels", skip_serializing_if = "Option::is_none")]
    pub common_labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "components", skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(
        rename = "forceCommonAnnotations",
        skip_serializing_if = "Option::is_none"
    )]
    pub force_common_annotations: Option<bool>,
    #[serde(rename = "forceCommonLabels", skip_serializing_if = "Option::is_none")]
    pub force_common_labels: Option<bool>,
    #[serde(
        rename = "ignoreMissingComponents",
        skip_serializing_if = "Option::is_none"
    )]
    pub ignore_missing_components: Option<bool>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD uses the Kubernetes version of the target cluster.
    #[serde(rename = "kubeVersion", skip_serializing_if = "Option::is_none")]
    pub kube_version: Option<String>,
    #[serde(
        rename = "labelIncludeTemplates",
        skip_serializing_if = "Option::is_none"
    )]
    pub label_include_templates: Option<bool>,
    #[serde(
        rename = "labelWithoutSelector",
        skip_serializing_if = "Option::is_none"
    )]
    pub label_without_selector: Option<bool>,
    #[serde(rename = "namePrefix", skip_serializing_if = "Option::is_none")]
    pub name_prefix: Option<String>,
    #[serde(rename = "nameSuffix", skip_serializing_if = "Option::is_none")]
    pub name_suffix: Option<String>,
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "patches", skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<models::V1alpha1KustomizePatch>>,
    #[serde(rename = "replicas", skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<models::V1alpha1KustomizeReplica>>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl V1alpha1ApplicationSourceKustomize {
    pub fn new() -> V1alpha1ApplicationSourceKustomize {
        V1alpha1ApplicationSourceKustomize {
            api_versions: None,
            common_annotations: None,
            common_annotations_envsubst: None,
            common_labels: None,
            components: None,
            force_common_annotations: None,
            force_common_labels: None,
            ignore_missing_components: None,
            images: None,
            kube_version: None,
            label_include_templates: None,
            label_without_selector: None,
            name_prefix: None,
            name_suffix: None,
            namespace: None,
            patches: None,
            replicas: None,
            version: None,
        }
    }
}
