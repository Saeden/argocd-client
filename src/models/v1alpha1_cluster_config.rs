/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1ClusterConfig : ClusterConfig is the configuration attributes. This structure is subset of the go-client rest.Config with annotations added for marshalling.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ClusterConfig {
    #[serde(rename = "awsAuthConfig", skip_serializing_if = "Option::is_none")]
    pub aws_auth_config: Option<Box<models::V1alpha1AwsAuthConfig>>,
    /// Server requires Bearer authentication. This client will not attempt to use refresh tokens for an OAuth2 flow. TODO: demonstrate an OAuth2 compatible client.
    #[serde(rename = "bearerToken", skip_serializing_if = "Option::is_none")]
    pub bearer_token: Option<String>,
    /// DisableCompression bypasses automatic GZip compression requests to the server.
    #[serde(rename = "disableCompression", skip_serializing_if = "Option::is_none")]
    pub disable_compression: Option<bool>,
    #[serde(rename = "execProviderConfig", skip_serializing_if = "Option::is_none")]
    pub exec_provider_config: Option<Box<models::V1alpha1ExecProviderConfig>>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "proxyUrl", skip_serializing_if = "Option::is_none")]
    pub proxy_url: Option<String>,
    #[serde(rename = "tlsClientConfig", skip_serializing_if = "Option::is_none")]
    pub tls_client_config: Option<Box<models::V1alpha1TlsClientConfig>>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl V1alpha1ClusterConfig {
    /// ClusterConfig is the configuration attributes. This structure is subset of the go-client rest.Config with annotations added for marshalling.
    pub fn new() -> V1alpha1ClusterConfig {
        V1alpha1ClusterConfig {
            aws_auth_config: None,
            bearer_token: None,
            disable_compression: None,
            exec_provider_config: None,
            password: None,
            proxy_url: None,
            tls_client_config: None,
            username: None,
        }
    }
}

