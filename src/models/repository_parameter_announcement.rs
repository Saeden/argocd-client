/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryParameterAnnouncement {
    /// array is the default value of the parameter if the parameter is an array.
    #[serde(rename = "array", skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// collectionType is the type of value this parameter holds - either a single value (a string) or a collection (array or map). If collectionType is set, only the field with that type will be used. If collectionType is not set, `string` is the default. If collectionType is set to an invalid value, a validation error is thrown.
    #[serde(rename = "collectionType", skip_serializing_if = "Option::is_none")]
    pub collection_type: Option<String>,
    /// itemType determines the primitive data type represented by the parameter. Parameters are always encoded as strings, but this field lets them be interpreted as other primitive types.
    #[serde(rename = "itemType", skip_serializing_if = "Option::is_none")]
    pub item_type: Option<String>,
    /// map is the default value of the parameter if the parameter is a map.
    #[serde(rename = "map", skip_serializing_if = "Option::is_none")]
    pub map: Option<std::collections::HashMap<String, String>>,
    /// name is the name identifying a parameter.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// required defines if this given parameter is mandatory.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// string is the default value of the parameter if the parameter is a string.
    #[serde(rename = "string", skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
    /// title is a human-readable text of the parameter name.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// tooltip is a human-readable description of the parameter.
    #[serde(rename = "tooltip", skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
}

impl RepositoryParameterAnnouncement {
    pub fn new() -> RepositoryParameterAnnouncement {
        RepositoryParameterAnnouncement {
            array: None,
            collection_type: None,
            item_type: None,
            map: None,
            name: None,
            required: None,
            string: None,
            title: None,
            tooltip: None,
        }
    }
}
