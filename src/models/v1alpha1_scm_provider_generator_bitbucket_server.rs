/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1ScmProviderGeneratorBitbucketServer : SCMProviderGeneratorBitbucketServer defines connection info specific to Bitbucket Server.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ScmProviderGeneratorBitbucketServer {
    /// Scan all branches instead of just the default branch.
    #[serde(rename = "allBranches", skip_serializing_if = "Option::is_none")]
    pub all_branches: Option<bool>,
    /// The Bitbucket Server REST API URL to talk to. Required.
    #[serde(rename = "api", skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(rename = "basicAuth", skip_serializing_if = "Option::is_none")]
    pub basic_auth: Option<Box<models::V1alpha1BasicAuthBitbucketServer>>,
    #[serde(rename = "bearerToken", skip_serializing_if = "Option::is_none")]
    pub bearer_token: Option<Box<models::V1alpha1BearerTokenBitbucket>>,
    #[serde(rename = "caRef", skip_serializing_if = "Option::is_none")]
    pub ca_ref: Option<Box<models::V1alpha1ConfigMapKeyRef>>,
    #[serde(rename = "insecure", skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// Project to scan. Required.
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

impl V1alpha1ScmProviderGeneratorBitbucketServer {
    /// SCMProviderGeneratorBitbucketServer defines connection info specific to Bitbucket Server.
    pub fn new() -> V1alpha1ScmProviderGeneratorBitbucketServer {
        V1alpha1ScmProviderGeneratorBitbucketServer {
            all_branches: None,
            api: None,
            basic_auth: None,
            bearer_token: None,
            ca_ref: None,
            insecure: None,
            project: None,
        }
    }
}

