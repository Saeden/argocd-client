/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1KnownTypeField : KnownTypeField contains a mapping between a Custom Resource Definition (CRD) field and a well-known Kubernetes type. This mapping is primarily used for unit conversions in resources where the type is not explicitly defined (e.g., converting \"0.1\" to \"100m\" for CPU requests).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1KnownTypeField {
    #[serde(rename = "field", skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    /// Type specifies the expected Kubernetes type for the field, such as \"cpu\" or \"memory\". This helps in converting values between different formats (e.g., \"0.1\" to \"100m\" for CPU).
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
}

impl V1alpha1KnownTypeField {
    /// KnownTypeField contains a mapping between a Custom Resource Definition (CRD) field and a well-known Kubernetes type. This mapping is primarily used for unit conversions in resources where the type is not explicitly defined (e.g., converting \"0.1\" to \"100m\" for CPU requests).
    pub fn new() -> V1alpha1KnownTypeField {
        V1alpha1KnownTypeField {
            field: None,
            r#type: None,
        }
    }
}

