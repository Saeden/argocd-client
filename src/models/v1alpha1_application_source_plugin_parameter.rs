/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ApplicationSourcePluginParameter {
    /// Array is the value of an array type parameter.
    #[serde(rename = "array", skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(rename = "map", skip_serializing_if = "Option::is_none")]
    pub map: Option<std::collections::HashMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(rename = "string", skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

impl V1alpha1ApplicationSourcePluginParameter {
    pub fn new() -> V1alpha1ApplicationSourcePluginParameter {
        V1alpha1ApplicationSourcePluginParameter {
            array: None,
            map: None,
            name: None,
            string: None,
        }
    }
}

