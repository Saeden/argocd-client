/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// V1Json : JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1Json {
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "raw", skip_serializing_if = "Option::is_none")]
    pub raw: Option<Vec<u8>>,
}

impl V1Json {
    /// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
    pub fn new() -> V1Json {
        V1Json { raw: None }
    }
}
