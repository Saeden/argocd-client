/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1alpha1ScmProviderGeneratorFilter : SCMProviderGeneratorFilter is a single repository filter. If multiple filter types are set on a single struct, they will be AND'd together. All filters must pass for a repo to be included.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ScmProviderGeneratorFilter {
    /// A regex which must match the branch name.
    #[serde(rename = "branchMatch", skip_serializing_if = "Option::is_none")]
    pub branch_match: Option<String>,
    /// A regex which must match at least one label.
    #[serde(rename = "labelMatch", skip_serializing_if = "Option::is_none")]
    pub label_match: Option<String>,
    /// An array of paths, all of which must not exist.
    #[serde(rename = "pathsDoNotExist", skip_serializing_if = "Option::is_none")]
    pub paths_do_not_exist: Option<Vec<String>>,
    /// An array of paths, all of which must exist.
    #[serde(rename = "pathsExist", skip_serializing_if = "Option::is_none")]
    pub paths_exist: Option<Vec<String>>,
    /// A regex for repo names.
    #[serde(rename = "repositoryMatch", skip_serializing_if = "Option::is_none")]
    pub repository_match: Option<String>,
}

impl V1alpha1ScmProviderGeneratorFilter {
    /// SCMProviderGeneratorFilter is a single repository filter. If multiple filter types are set on a single struct, they will be AND'd together. All filters must pass for a repo to be included.
    pub fn new() -> V1alpha1ScmProviderGeneratorFilter {
        V1alpha1ScmProviderGeneratorFilter {
            branch_match: None,
            label_match: None,
            paths_do_not_exist: None,
            paths_exist: None,
            repository_match: None,
        }
    }
}
