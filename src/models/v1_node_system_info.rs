/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1NodeSystemInfo : NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1NodeSystemInfo {
    #[serde(rename = "architecture", skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// Boot ID reported by the node.
    #[serde(rename = "bootID", skip_serializing_if = "Option::is_none")]
    pub boot_id: Option<String>,
    /// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
    #[serde(rename = "containerRuntimeVersion", skip_serializing_if = "Option::is_none")]
    pub container_runtime_version: Option<String>,
    /// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
    #[serde(rename = "kernelVersion", skip_serializing_if = "Option::is_none")]
    pub kernel_version: Option<String>,
    /// Deprecated: KubeProxy Version reported by the node.
    #[serde(rename = "kubeProxyVersion", skip_serializing_if = "Option::is_none")]
    pub kube_proxy_version: Option<String>,
    /// Kubelet Version reported by the node.
    #[serde(rename = "kubeletVersion", skip_serializing_if = "Option::is_none")]
    pub kubelet_version: Option<String>,
    #[serde(rename = "machineID", skip_serializing_if = "Option::is_none")]
    pub machine_id: Option<String>,
    #[serde(rename = "operatingSystem", skip_serializing_if = "Option::is_none")]
    pub operating_system: Option<String>,
    /// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
    #[serde(rename = "osImage", skip_serializing_if = "Option::is_none")]
    pub os_image: Option<String>,
    #[serde(rename = "swap", skip_serializing_if = "Option::is_none")]
    pub swap: Option<Box<models::V1NodeSwapStatus>>,
    #[serde(rename = "systemUUID", skip_serializing_if = "Option::is_none")]
    pub system_uuid: Option<String>,
}

impl V1NodeSystemInfo {
    /// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
    pub fn new() -> V1NodeSystemInfo {
        V1NodeSystemInfo {
            architecture: None,
            boot_id: None,
            container_runtime_version: None,
            kernel_version: None,
            kube_proxy_version: None,
            kubelet_version: None,
            machine_id: None,
            operating_system: None,
            os_image: None,
            swap: None,
            system_uuid: None,
        }
    }
}

