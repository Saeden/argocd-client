/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1EventSeries : EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1EventSeries {
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "lastObservedTime", skip_serializing_if = "Option::is_none")]
    pub last_observed_time: Option<Box<models::V1MicroTime>>,
}

impl V1EventSeries {
    /// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
    pub fn new() -> V1EventSeries {
        V1EventSeries {
            count: None,
            last_observed_time: None,
        }
    }
}

