/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1TlsClientConfig {
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "caData", skip_serializing_if = "Option::is_none")]
    pub ca_data: Option<Vec<u8>>,
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "certData", skip_serializing_if = "Option::is_none")]
    pub cert_data: Option<Vec<u8>>,
    /// Insecure specifies that the server should be accessed without verifying the TLS certificate. For testing only.
    #[serde(rename = "insecure", skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "keyData", skip_serializing_if = "Option::is_none")]
    pub key_data: Option<Vec<u8>>,
    /// ServerName is passed to the server for SNI and is used in the client to check server certificates against. If ServerName is empty, the hostname used to contact the server is used.
    #[serde(rename = "serverName", skip_serializing_if = "Option::is_none")]
    pub server_name: Option<String>,
}

impl V1alpha1TlsClientConfig {
    pub fn new() -> V1alpha1TlsClientConfig {
        V1alpha1TlsClientConfig {
            ca_data: None,
            cert_data: None,
            insecure: None,
            key_data: None,
            server_name: None,
        }
    }
}
