/*
 * Consolidate Services
 *
 * Description of all APIs
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1alpha1ApplicationSetApplicationStatus {
    #[serde(rename = "application", skip_serializing_if = "Option::is_none")]
    pub application: Option<String>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
    #[serde(rename = "lastTransitionTime", skip_serializing_if = "Option::is_none")]
    pub last_transition_time: Option<String>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "step", skip_serializing_if = "Option::is_none")]
    pub step: Option<String>,
    /// TargetRevision tracks the desired revisions the Application should be synced to.
    #[serde(rename = "targetrevisions", skip_serializing_if = "Option::is_none")]
    pub targetrevisions: Option<Vec<String>>,
}

impl V1alpha1ApplicationSetApplicationStatus {
    pub fn new() -> V1alpha1ApplicationSetApplicationStatus {
        V1alpha1ApplicationSetApplicationStatus {
            application: None,
            last_transition_time: None,
            message: None,
            status: None,
            step: None,
            targetrevisions: None,
        }
    }
}
